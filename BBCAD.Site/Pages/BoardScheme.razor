@page "/board/{Id}/scheme"

@using System.Text.Json
@using BBCAD.Site.Services
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Options

@using BBCAD.API.DTO
@using BBCAD.Site.Settings;

@inject IBatchProcessingService BatchProcessingService

@if (NewBoard)
{
    <h3>Create a New Board</h3>
}
else
{
    @if (Board == null)
    {
        <PageTitle>Board Scheme</PageTitle>
    }
    else
    {
        <PageTitle>@Board?.Name</PageTitle>
        <h1>@Board?.Name</h1>
    }
}


@* <button class="btn btn-primary" @onclick="ReloadBoard" disabled="@BtnDisabled">@this.BtnName</button>

<a href="/board/@Id/metadata">
    <input class="btn btn-primary" type="button" value="Modify Metadata" disabled="@BtnDisabled" />
</a> *@

<CommandControl Id="@Id" OnCommand="@(async (data) => { await ProcessCommandResult(data.Item1, data.Item2); })" />

@if (!NewBoard)
{
    @if (getBoardSucceed)
    {
        if (!string.IsNullOrEmpty(content))
        {
            <img src="@content" />
        }
    }
    else
    {
        <p style="Color:red">Error: @getBoardError</p>
    }
}


@code {
    private string content = string.Empty;

    protected bool BtnDisabled = false;
    protected string BtnName = default!;
    protected string BtnConstantName = default!;

    private bool getBoardSucceed = true;
    private string getBoardError = string.Empty;

    [Parameter]
    public string Id { get; set; } = Guid.Empty.ToString();
    public bool NewBoard => Id == Guid.Empty.ToString();

    public BatchProcessingResponce.BoardInfo? Board { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BtnName =
        BtnConstantName = "Reload Image";

        if (!NewBoard)
        {
            await ReloadBoard();
            StateHasChanged();
        }
    }

    private async Task ReloadBoard()
    {
        BtnDisabled = true;
        BtnName = "Rendering ...";

        await GetBoardContent();

        BtnName = BtnConstantName;
        BtnDisabled = false;

        StateHasChanged();
    }

    private async Task ProcessCommandResult(Guid id, BatchProcessingResponce.BoardInfo board)
    {
        Board = board;
        content = "data:image/svg+xml;base64, " + Base64Encode(Board?.Svg);

        if (NewBoard)
        {
            Id = id.ToString();
            StateHasChanged();
        }

        await Task.Yield();
    }

    private async Task GetBoardContent()
    {
        try
        {
            var responce = await BatchProcessingService.CallBoardAPI(HttpMethod.Get, $"particular-board/?boardId={Id}");

            Board = responce?.Boards?.First().Value;

            if (Board == null)
            {
                throw new Exception($"The answer does not contain any board");
            }

            content = "data:image/svg+xml;base64, " + Base64Encode(Board?.Svg);

            getBoardSucceed = true;
            getBoardError = string.Empty;
        }
        catch (Exception ex)
        {
            getBoardSucceed = false;
            getBoardError = ex.Message;
        }
    }

    private static string Base64Encode(string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }

    public static string Base64Decode(string base64EncodedData)
    {
        var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
        return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
    }
}
