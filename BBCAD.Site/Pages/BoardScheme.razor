@page "/board/{Id}/scheme"

@using System.Text.Json
@using Microsoft.AspNetCore.Mvc
@using Microsoft.Extensions.Options

@using BBCAD.API.DTO
@using BBCAD.Site.Settings;

@inject IHttpClientFactory ClientFactory
@inject IOptions<BoardAPIOptions> _boardAPIOptions

@if (Board == null)
{
    <PageTitle>Board Scheme</PageTitle>
}
else
{
    <PageTitle>@Board?.Name</PageTitle>
    <h1><font color="gray">Edit</font> @Board?.Name <font color="gray">Scheme</font></h1>
}

@if (getBoardSucceed)
{
    if (!string.IsNullOrEmpty(content))
    {
        <img src="@content" />
    }
}
else
{
    <p style="Color:red">Error: @getBoardError</p>
}

<br />
<br />

<button class="btn btn-primary" @onclick="ReloadBoard" disabled="@BtnDisabled">@this.BtnName</button>

<a href="/board/@Id/metadata">
    <input class="btn btn-primary" type="button" value="Modify Metadata" disabled="@BtnDisabled" />
</a>


@code {
    private string content = string.Empty;
    private string boardAPIImageUri = string.Empty;

    protected bool BtnDisabled = false;
    protected string BtnName = default!;
    protected string BtnConstantName = default!;

    private bool getBoardSucceed = true;
    private string getBoardError = string.Empty;

    [Parameter]
    public string Id { get; set; } = Guid.Empty.ToString();

    public BatchProcessingResponce.BoardInfo? Board { get; set; }

    protected override async Task OnInitializedAsync()
    {
        boardAPIImageUri = _boardAPIOptions.Value.Connection + $"/particular-board/?boardId={Id}";

        BtnName =
        BtnConstantName = "Reload Image";

        await ReloadBoard();

        StateHasChanged();
    }

    public async Task OnGetAsync(Guid? id)
    {

        // Emulate hard async work
        await Task.Yield();
        await Task.Delay(string.IsNullOrEmpty(content) ? 0 : 500);
    }

    private async Task ReloadBoard()
    {
        BtnDisabled = true;
        BtnName = "Rendering ...";

        // Emulate hard async work
        await Task.Yield();
        await Task.Delay(string.IsNullOrEmpty(content) ? 0 : 500);

        await GetBoardContent();

        BtnName = BtnConstantName;
        BtnDisabled = false;

        StateHasChanged();
    }

    private async Task GetBoardContent()
    {
        var client = ClientFactory.CreateClient();
        var request = new HttpRequestMessage(HttpMethod.Get, boardAPIImageUri);

        try
        {
            var response = await client.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                using var responseStream = await response.Content.ReadAsStreamAsync();
                var rawContent = await response.Content.ReadAsStringAsync();
                var responce = JsonSerializer.Deserialize<BatchProcessingResponce>(rawContent);

                if (!string.IsNullOrWhiteSpace(responce?.Error))
                {
                    throw new Exception(responce?.Error);
                }

                Board = responce?.Boards?.First().Value;

                if (Board == null)
                {
                    throw new Exception($"The answer does not contain any board");
                }

                content = "data:image/svg+xml;base64, " + Base64Encode(Board?.Svg);

                getBoardSucceed = true;
                getBoardError = string.Empty;
            }
            else
            {
                getBoardSucceed = false;
                getBoardError = $"{response.StatusCode}: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            getBoardSucceed = false;
            getBoardError = $"{ex}: ex.Message";
        }
    }


    private static string Base64Encode(string plainText)
    {
        var plainTextBytes = System.Text.Encoding.UTF8.GetBytes(plainText);
        return System.Convert.ToBase64String(plainTextBytes);
    }

    public static string Base64Decode(string base64EncodedData)
    {
        var base64EncodedBytes = System.Convert.FromBase64String(base64EncodedData);
        return System.Text.Encoding.UTF8.GetString(base64EncodedBytes);
    }
}
