@page "/board/{Id}/command"

@using BBCAD.API.DTO
@using BBCAD.Cmnd.Commands
@using BBCAD.Site.Services

@inject IBatchProcessingService BatchProcessingService

<div style="width:100%; display:flex; margin-bottom:5px; align-items:center;">

    <div style="width:fit-content; margin:5px;"><button class="btn btn-primary" @onclick="SendCommand" disabled="@SendingIsNotPossible">Apply</button></div>

    <div style="flex:1; margin:5px;"><input @bind="Command" @bind:event="oninput" @onkeypress="SendOnEnter" disabled="@SendingNow" style="width:100%; max-width:100%;" /></div>

</div>

@code {
    private string? Command { get; set; } = "";

    public bool SendingNow { get; set; } = false;
    public bool NewBoard => Id == Guid.Empty.ToString();
    public bool CommandIsEmpty => String.IsNullOrWhiteSpace(Command);
    public bool SendingIsNotPossible => CommandIsEmpty || SendingNow;

    [Parameter]
    public string Id { get; set; } = Guid.Empty.ToString();

    [Parameter]
    public EventCallback<Tuple<Guid, BatchProcessingResponce.BoardInfo>> OnCommand { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (NewBoard)
        {
            Command = @"CREATE BOARD Name = ""NewBoard"" X = 4 Y = 4";
        }
    }

    private async Task SendOnEnter(KeyboardEventArgs keyboardEventArgs)
    {
        if (keyboardEventArgs.Code == "Enter")
        {
            await SendCommand();
        }
    }

    private async Task SendCommand()
    {
        if (CommandIsEmpty)
        {
            return;
        }

        if (SendingNow)
        {
            return;
        }
        else
        {
            SendingNow = true;
        }

        try
        {
            string? command = NewBoard ? Command : $"{Command} Id = \"{Id}\"";
            var responce = await BatchProcessingService.CallBoardAPI(HttpMethod.Post, $"modify-board", command);
            var board = responce?.Boards?.First().Value;
            Guid? id = responce?.Boards?.First().Key;

            if (NewBoard)
            {
                Id = id.Value.ToString();
                Command = string.Empty;
            }

            if (id != null && board != null)
            {
                await OnCommand.InvokeAsync(new(id.Value, board));
            }
        }
        finally
        {
            SendingNow = false;
        }
    }
}
