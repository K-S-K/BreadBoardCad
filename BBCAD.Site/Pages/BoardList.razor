@page "/boardlist"

@using System.Text.Json
@using Microsoft.Extensions.Options

@using BBCAD.Data
@using BBCAD.API.DTO
@using BBCAD.Site.Services
@using BBCAD.Site.Settings

@inject IBatchProcessingService BatchProcessingService

<PageTitle>Board List</PageTitle>

<h1>Board List</h1>

@if (!getBoardSucceed)
{
    <p style="Color:red">Error: @getBoardError</p>
}
else if (boards == null)
{
    <p><em>Loading...</em></p>
}
else if (!boards.Any())
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Size</th>
                <th>Name</th>
                <th>Descr</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var board in boards)
            {
                <tr>
                    <td width="1" style="white-space:nowrap"><a href="./board/@board.Key/scheme">@board.Value.SizeX x @board.Value.SizeY</a></td>
                    <td width="1" style="white-space:nowrap"><a href="./board/@board.Key/scheme">@board.Value.Name</a></td>
                    <td>@board.Value.Description</td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private Dictionary<Guid, BatchProcessingResponce.BoardInfo>? boards;

    private bool getBoardSucceed = true;
    private string getBoardError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await ReloadBoardList();

        StateHasChanged();
    }

    private async Task ReloadBoardList()
    {
        boards = null;

        await GetBoardContent();

        StateHasChanged();
    }

    private async Task GetBoardContent()
    {
        try
        {
            var responce = await BatchProcessingService.CallBoardAPI(HttpMethod.Get, $"user-boards-list/?userId={Guid.Empty}");

            boards = responce?.Boards;

            getBoardSucceed = true;
            getBoardError = string.Empty;
        }
        catch (Exception ex)
        {
            getBoardSucceed = false;
            getBoardError = $"{ex}: ex.Message";
        }
    }
}
